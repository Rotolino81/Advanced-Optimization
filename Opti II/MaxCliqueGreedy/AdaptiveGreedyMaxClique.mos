!@encoding CP1252
model MaxClique
	forward procedure ReadDataFile
	forward function argmax(Candidatos: set of integer): integer
	forward procedure ComputeGreedyValues(Candidatos: set of integer)
	forward procedure UpdateFeasibleSet(Candidatos: set of integer)
	
	declarations
		delta: array(V:set of integer) of set of integer !Arreglo para almacenar los conjunto de adyacencia de los nodos
		C: set of integer !Clique
		f: integer !Valor de la función objetivo
		FeasibleSet: set of integer	!Conjunto factible de elementos (nodos que aún pueden ser añadidos al clique)
		g: array(V) of integer !Vector para almacenar el valor voraz de cada nodo del conjunto factible
	end-declarations

	ReadDataFile
	
	!Algoritmo voraz adaptativo
	C:={}
	f:=0
	FeasibleSet:={1..getsize(V)}
	while(FeasibleSet <> {}) do
		ComputeGreedyValues(FeasibleSet)
		v:=argmax(FeasibleSet)
		C:=C+{v}
		f:=f+1
		UpdateFeasibleSet(FeasibleSet)
	end-do
	
	writeln("El conjunto de nodos del clique es: ", C)
  	writeln("El tamaño del clique es: ", f)
	
	(!Procedimiento para la lectura de las aristas de grafo y
	  actualizar el conjunto de nodos y los conjuntos de adyacencia!)

	procedure ReadDataFile
		declarations
			f: string
			i:integer
			j: integer
		end-declarations
		writeln("Archivo de datos: ")
	    read(f)
		fopen(f, F_INPUT)
		while (not iseof) do
			read(i)
			read(j)
			delta(i):=delta(i)+{j}
			delta(j):=delta(j)+{i}
		end-do
	end-procedure
	
	(!Función para seleccionar un nodo con el máximo de nodos adyacentes
	  a los nodos del conjunto factible!)
	function argmax(Candidates: set of integer): integer
		maxu:=-MAX_REAL
		forall(k in Candidates) do
			if g(k) > maxu then 
				maxu:=g(k)
				kstar:=k
			end-if
		end-do
		returned:=kstar			
	end-function
	
	(!Procedimiento para calular el valor de la función voraz
	  de cada uno de los nodos del grafo!)
	procedure ComputeGreedyValues(Candidates: set of integer)
		forall(i in Candidates) g(i):=getsize(delta(i)*FeasibleSet)
	end-procedure
	
	!Procemiento para la actualización del conjunto factible de elementos
	procedure UpdateFeasibleSet(Candidates: set of integer)
		declarations
			Aux: set of integer
		end-declarations
		Candidates-={v}                   
		Aux:=Candidates
		forall(k in Aux | k not in delta(v)) Candidates-={k}
	end-procedure
	
end-model	